Notes on database entries for elliptic curves over number fields (other than Q)

######################################
#                                    #
#  Data stored in the mongo database #
#                                    #
######################################

In the existing (mongodb) Database elliptic_curves there is a
Collection called curves, contain elliptic curves over Q only.  We
have added *one* new collection, called nfcurves, which will hold one
"document" (mongo-ese for a single database record) for each curve
over number fields other than Q.

Each document has keys which we group for convenience here into two
parts: field keys and curve keys.  The field keys identify the field K
over which the curve E is defined, with enough detail so that searches
can be done for curves over specific fields or (for example) over real
quadratic fields.  The curve fields identify the curve and contains
various invariants and properties of the curve.  In many cases some of
these will not be known, in which case they are simply omitted; and
the code which deals with these documents and creates web pages will
have to be aware of this partial data.

I have given these keys long names here for clarity.  Harald
recommends using short names to save space, as in our code we can
easily define longer pseudonyms (e.g. conductor_norm = "cn").  **THIS
HAS NOT YET BEEN DONE** and if not done soon it will be too late,
since changing these names requires (1) changing the upload scripts;
(2) re-running theupload scripts on all the data; (3) changing all the
website scripts.  (2) could be done in other ways, but probably not
worth it.

FIELD KEYS (Mandatory keys marked with *)

field_label  *   string          2.2.5.1
degree       *   int             2
signature    *   [int,int]       [2,0]
abs_disc     *   int             5

CURVE KEYS (Mandatory keys marked with *)

label              *     string (see below)
short_label        *     string
conductor_label    *     string
iso_label          *     string (letter code of isogeny class)
conductor_ideal    *     string
conductor_norm     *     int
number             *     int    (number of curve in isogeny class, from 1)

Here,

 label = "%s-%s" % (field_label, short_label)
 short_label = "%s-%s%s" % (conductor_label, iso_label, str(number))

We do not insist on a common format for the conductor_label or
conductor_ideal.  The conductor_ideal should contain enough
information to uniquely construct the conductor as an ideal.  The
conductor_label need not, it could be something like "17.1" for the
first ideal of norm 17 in some order.  For each type of field we
include (real quadratic, imaginary quadratic, etc) these label formats
will need to be specified somewhere and functions provided in the code
to parse them.  See the file quadratic_ideals.txt for the quadratic
case.

All number field elements (NFelt) will be represented in the database
as a list of length d where d=[K:Q], each component a string which
represents the rational number num/den.  Originally we stored
rationals as pairs of integers [num,den] but this failed as soon as we
had a curve who coefficients were loo large for Mongo to manage (it
has a limitation of 8-byte integers).  The d rationals in the list are
the coefficients of the number field element with respect to the power
basis on the generator of K whose minimal polynomial is stored in the
number field database.  The a-invariants will be a list of 5 of these
lists of strings.  Points will be lists of three of these, the
projective coordinates, and the gens and torsion_gens fields are lists
of points.

CURVE KEYS continued. (Mandatory keys marked with *)

ainvs                  *         5-list of NFelts (Weierstrass coefficients)
jinv                   *         NFelt
cm                     *         int (a negative discriminant, or 0)
base_change            *         list of labels of curves over Q (or [])
Q-curve                *         boolean (True, False)
rank                             int
rank_bounds                      2-list of ints
analytic_rank                    int
torsion_order                    int
torsion_structure                {0,1,2}-list of ints
gens                             list of 3-lists of NFelts
torsion_gens                     list of 3-lists of NFelts
sha_an                           int
isogeny_matrix         *         list of list of ints (degrees)
non-surjective_primes            list of ints
galois_images                    list of strings

There is no need for the Weierstrass coefficients to have any
properties such as minimal / reduced model, but they should be
integral.  Obviously one would not have both rank_bounds and rank (and
similar).

N.B. base_change should be [] unless E is isomorphic over K to an
elliptic curve E0 defined over Q.  For this it is necessary but not
sufficient that j(E) lie in Q!  If not [], the value is a list of
labels of elliptic curves over Q.  (When K is quadratic this will
noramlly contain 2 entries, labels of curves which are quadratic
twists of each other.)  This field depends on the curve, not just its
isogeny class.  By contrast, Q-curve is True iff the curve is
isogenous to all its Galois conjugates, which is an isogeny-invariant
property.  If any curve in the class is a base-change then all curves
in the class are Q-curves (including those definable over Q), but it
is possible for an isogeny class of Q-curves not to contain any
individual curves defined over Q.  N.B. Sage version >= 6.3 is needed
for E.descend_to(QQ) to give a list of curves over Q, as the import
script needs, rather than either None or a single label (and will a
lot of bugs) as it used to.

Isogeny degree matrix: under construction (August 2014) after
implementing in Sage an extension of the E.isogeny_class() function
previously only available over Q.  Not in Sage 6.3, relies on code at
http://trac.sagemath.org/ticket/16743 currently awaiting review.  The
idea is to process all the curves.* files provided by people, taking
only one curve in each class and recomputing the class; sending the
output to a file called (perhaps) allcurves.* in the same format as
curves.*, and hopefully having the same number of lines if the
original curves.* did actually contain complete isogeny classes, as
well as a file isoclass.* (see below for the format of these files).

*NB* Even if the original curves.* files were complete (closed under
isogeny), since we do not yet have a canonical choice of model for
elliptic curves over number fields other than Q, we cannot compare the
content of the input with the new allcurves.* output using simple
text-based tools such as diff.  Worse than that, the sorting of the
curves in an isogeny class depends on a lexicographical ordering of
the a-invariants, so if different models are used then the ordering
will change.  This is not a satisfactory situation, but is the best we
can do until we come up with a canonical model for each curve, or at
least a canonical way of specifying its isomorphism class which could
be used to provide a canonical ordering for curves in the isogeny
class.

###################################################
#                                                 #
#  Raw data files for uploading into the database #
#                                                 #
###################################################

We agreed to create plain text files with one line per curve
containing data from which the above data fields can be obtained.
These files can obviously come from a variety of sources (Sage
scripts, Magma scripts, C++ programs, etc.)  but will share a common
format.  See the file sample-nfcurve for the details.

There is no need for contributors to provide all of the data fields,
for several reasons:

1. There is no need to include (for example) j-invariants as these can
be computed on the fly when uploading; similarly for torsion, and
other "easy" invariants;

2. We may not have complete data for all curves, e.g. we may have no
generators or not know the rank.  But we want to use common
file-parsing and upload scripts.  These have now been written,
similarly to those in lmfdb/elliptic_curves/import_ec_data.py, for
curves.*, isoclass.* (under construction) and curve_data.* files (see
later for these).

3. Although we initially expected torsion structure and gens to be
supplied, we later decided that it was easy and quick to complete
these on the fly.  (Actually it is not so quick, and is probably the
main reason the upload scripts are currently slow, but there are no
current plans to change this.)  We keep the number of data fields per
input line constant (or predictable), by putting "?" into the raw data
files when a field is missing (either unknown, or redundant --
e.g. rank bounds not needed if rank known).  Each data field must not
contain any whitespace, since the parsing script uses whitespace to
split each line up into data fields.

-- Common Data Fields and conventions --

The import scripts can handle more than one set of files, each of
which has exactly one line per curve (note: isoclass.* files may have
only one per isogeny class).  For this to work, each line in each set
of files has 4 common label fields which uniquely identify each curve.
These common fields for every file are the following:

1. field_label
2. conductor_label
3. iso_label
4. number

since the unique label is then obtained by concatenating these, joined
as field_label + "-" + conductor_label + "-" + iso_label + "." +
number.  (I have tried to make this compatible with HMF labels, so I
hope I have it correct.  A typical HMF complete label is
2.2.5.1-31.1-a where ‘2.2.5.1’ is the field_label and ‘31.1’ the
conductor_label and ‘a’ the iso_label.)

In the input file NFelts are formatted as strings consisting of d
coefficients separated by ",", each an integer or rational, with no
embedded spaces.

Currently we cater for up to 3 sets of files: curves and isoclass
(obligatory) and curve_data (optional) with the following fields after
the above 4.  The file names should be of the form "curves.xyz",
"isoclass.xyz" and "curve_data.xyz" with the same suffix (here "xyz")
to identify the dataset in some way.  So far we have xyz=sample for
the sample curves files, xyz=qsqrt5 for Alyson’s data and cubic-23 for
Paul and Dan’s, but if they provide additional curves with (say)
different conductor ranges then we would need to change these suffices
to be more specific.  The intention is that these raw data files
should be kept under revision control, by their creators and/or John,
who has created the git repository
https://github.com/JohnCremona/ecnf-data for this.

-- Additional data fields in curves.xyz --

5: conductor_ideal
6: conductor_norm
7...11: ainvs (in 5 fields separated by space)
12: cm (0 or a negative discriminant)
13: Q_curve (use 0 and 1 for False and True)

Sample line: 2.2.5.1 31.1 a 1 [31,18,1] 31  1,0 -1,-1 0,1 0,0 0,0 0 0

-- Additional data fields in curve_data.xyz --

5: rank                   int or ?
6: rank_bounds      [int,int] or ?
7: analytic_rank          int or ?
8: ngens (number of generators of infinite order which follow) int
9...8+ngens: gens (number of fields equals ngens or absent if ngens=0) point-string
9+ngens:  sha_an          int or ?

For points the syntax will be [x:y:z] with x, y, z all NFelts as
strings and no embedded spaces.

Sample line:

2.2.5.1 31.1 a 1 ? ? 0 0 ?

-- Additional data fields in isoclass.xyz --

5: a list of lists of positive integers, so that the (i,j) entry is
the degree of a cyclic isogeny from curve i to curve j in the class.
Symmetric, with diagonal entries 1.  For non-CM classes the degrees
are uniquely determined by (i,j), and we will create an isogeny graph
based on the "unfilled" version of the matrix with all non-prime
entries replaced by 0 to indicate a non-edge.  For CM classes the
situation is more complicated as there are multiple possible degrees
between the i'th and j'th curves when these have the same endomorphism
ring (strinctly greater than Z).  The current code has a small prime
in each such position (i,j) with i!=j, even though this makes for a
graph with too many edges when the class number is larger.

Sample line:

2.0.4.1 [65,18,1] a 1 [[1,6,3,2,6,3],[6,1,2,3,9,18],[3,2,1,6,18,9],[2,3,6,1,3,6],[6,9,18,3,1,2],[3,18,9,6,2,1]]

-- Additional data fields in galrep.xyz --

5++: 0 or more strings representing images of mod-p representations of
     non-maximal image

Sample line:

2.2.437.1 4.1 a 1 3Nn

-- Other fields --

Some of the database fields (e.g. short_label, jinv) are trivially
obtained from these, and the torsion structure and gens will also be
computed during the upload.  I divided up the two raw data files so
that if you only know the basics about curves (its equation, and cm &
Q_curve flags) then you only need provide the curves file while if
you know more about their Mordell-Weil group then you can provide
curve_data files too.  The upload scripts will check for consistency
that the conductor is correct. (This has already revealed some
glitches in the files, so was definitely a good idea!).  The
base_change field in the database will be computed on upload (for
curves for which Q_curve is True) by checking that the j-invariant is
in QQ and using Sage's E.descends_to(QQ) function.

If all contributors agree to keep to this then we will be able to use
the uniform upload scripts, which have been written (by John), based
on the elliptic curve upload scripts.  See lmfdb/ecnf/import_ecnf_data.py.

-- TODO (this is being changed) --

A mockup of a typical mongoDB entry:

{
 "_id" : <chosen by mongodb and rather random>,
 "field" : [ <label>, <degree>, [ <sig1>, <sig2> ], <abs_disc> ],
 "label" : <curve label>,
 "

the class structure (mapping the database entries to python classes)

ECNF:
* NField (it’s own class)
   * label
   * ...
* label
* ...
